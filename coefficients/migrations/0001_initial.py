# Generated by Django 4.2.7 on 2025-10-20 08:04

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "position",
                    models.CharField(blank=True, max_length=100, verbose_name="岗位"),
                ),
                (
                    "phone",
                    models.CharField(blank=True, max_length=20, verbose_name="电话"),
                ),
                (
                    "is_approved",
                    models.BooleanField(default=False, verbose_name="是否审批通过"),
                ),
                (
                    "can_manage_coefficients",
                    models.BooleanField(default=False, verbose_name="可管理系数"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
            ],
            options={
                "verbose_name": "用户",
                "verbose_name_plural": "用户",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="EmissionCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="分类名称")),
                (
                    "name_en",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="分类名称(英文)"
                    ),
                ),
                (
                    "level",
                    models.IntegerField(
                        choices=[(1, "一级分类"), (2, "二级分类")], verbose_name="分类级别"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="coefficients.emissioncategory",
                        verbose_name="父级分类",
                    ),
                ),
            ],
            options={
                "verbose_name": "排放分类",
                "verbose_name_plural": "排放分类",
                "ordering": ["level", "name"],
                "unique_together": {("name", "parent")},
            },
        ),
        migrations.CreateModel(
            name="Hotel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(max_length=50, unique=True, verbose_name="酒店代码"),
                ),
                ("name", models.CharField(max_length=200, verbose_name="酒店名称")),
                (
                    "name_en",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="酒店名称(英文)"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="是否启用")),
            ],
            options={
                "verbose_name": "酒店",
                "verbose_name_plural": "酒店",
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="EmissionCoefficient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "product_code",
                    models.CharField(
                        db_index=True, max_length=50, unique=True, verbose_name="产品编号"
                    ),
                ),
                ("product_name", models.CharField(max_length=200, verbose_name="产品名称")),
                (
                    "product_name_en",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="产品名称(英文)"
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        choices=[
                            ("KG", "KG"),
                            ("L", "L"),
                            ("个", "个"),
                            ("吨", "吨"),
                            ("度", "度"),
                            ("立方米", "立方米"),
                        ],
                        max_length=20,
                        verbose_name="单位",
                    ),
                ),
                (
                    "coefficient",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="碳排放系数"
                    ),
                ),
                ("special_note", models.TextField(blank=True, verbose_name="特殊备注")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="最后更新"),
                ),
                (
                    "category_level1",
                    models.ForeignKey(
                        limit_choices_to={"level": 1},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="coefficients_level1",
                        to="coefficients.emissioncategory",
                        verbose_name="一级分类",
                    ),
                ),
                (
                    "category_level2",
                    models.ForeignKey(
                        limit_choices_to={"level": 2},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="coefficients_level2",
                        to="coefficients.emissioncategory",
                        verbose_name="二级分类",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="更新人",
                    ),
                ),
            ],
            options={
                "verbose_name": "碳排放系数",
                "verbose_name_plural": "碳排放系数",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.AddField(
            model_name="customuser",
            name="hotel",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="users",
                to="coefficients.hotel",
                verbose_name="所属酒店",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
    ]
